name: Frontend Testing

on:
  push:
    branches: [ "main" ]
    paths:
      - 'Frontend/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'Frontend/**'
  workflow_dispatch:

jobs:
  integration-tests:
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:19.03.12
        options: --privileged

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install docker-compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    - name: Set up .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Set up Playwright
      uses: microsoft/playwright-github-action@v1

    - name: Install Playwright Browsers
      run: |
        npx playwright install

    - name: Create secret files
      run: |
        mkdir -p /home/runner/secrets
        echo "${{ secrets.CLERK_SECRET_KEY }}" > /home/runner/secrets/clerk-secretKey.txt
        echo "${{ secrets.CLERK_AUTHORIZED_PARTY }}" > /home/runner/secrets/clerk-authorizedParty.txt
        echo "${{ secrets.CLERK_AUTHORITY }}" > /home/runner/secrets/clerk-authority.txt
        echo "${{ secrets.GOOGLE_GCLOUD_CREDENTIALS }}" > /home/runner/secrets/google-credentials.json

    - name: Setup environment variables
      run: |
        echo "Clerk__SecretKey=${{ secrets.CLERK_SECRET_KEY }}" >> $GITHUB_ENV
        echo "Clerk__AuthorizedParty=${{ secrets.CLERK_AUTHORIZED_PARTY }}" >> $GITHUB_ENV
        echo "Clerk__Authority=${{ secrets.CLERK_AUTHORITY }}" >> $GITHUB_ENV
        echo "${{ secrets.GOOGLE_GCLOUD_CREDENTIALS }}" > google-credentials.json
        echo "GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/google-credentials.json" >> $GITHUB_ENV

    - name: Start Docker containers
      run: |
        docker-compose -f Frontend/docker-compose.integration.yml up -d

    - name: Wait for containers to be healthy
      run: |
        docker-compose -f Frontend/docker-compose.integration.yml ps
        until [ $(docker inspect --format='{{json .State.Health.Status}}' diploma-maker-test-backend_1) == '"healthy"' ]; do
          echo "Waiting for backend to be healthy...";
          docker inspect --format='{{json .State.Health.Status}}' diploma-maker-test-backend_1
          docker logs diploma-maker-test-backend_1
          sleep 10;
        done

    - name: Run Integration Tests
      run: |
        cd Frontend
        dotnet test DiplomaMaker.Web.Tests.sln --configuration Release --logger 'trx;LogFileName=test_results.trx' --logger "console;verbosity=detailed"

    - name: Upload Test Results
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: Frontend/test_results.trx

/*
    BaseEntity

    Defines a generic base entity from which all model entities inherit.

    Provides them with an Id as autogenerated primary key,
    a guid which can be exposed to the frontend, as well
    as a generic Patch method which updates the value of one entity
    with the values of another entity of the same type (except Id and Guid).
*/

using Newtonsoft.Json;

namespace DiplomaMakerApi.Models;

public abstract class BaseEntity<TEntity>()
where TEntity : BaseEntity<TEntity>
{
    public int Id { get; set; }
    public Guid Guid { get; init; } = Guid.NewGuid();

    /* 
        Accepts a patch object of the same type
        and updates the values of this object with patch object values.
    */
    public void Patch(TEntity patch)
    {
        foreach (var property in typeof(TEntity).GetProperties())
        {
            if (property.Name == "Id" || property.Name == "Guid")
                continue;

            property.SetValue(this, property.GetValue(patch));
        }
    }

    public override string ToString()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /*
        Sets the Id of each member of this entity to -1.
    */
    public TEntity HideId()
    {
        Id = -1;
        return (TEntity)this;
    }
}
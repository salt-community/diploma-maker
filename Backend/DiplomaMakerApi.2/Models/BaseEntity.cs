/*
    BaseEntity

    Defines a generic base entity from which all model entities inherit.

    Provides them with an Id as autogenerated primary key,
    a guid which can be exposed to the frontend, as well
    as a generic Patch method which updates the value of one entity
    with the non-null values of another entity of the same type.
*/

using System.Text.RegularExpressions;
using Newtonsoft.Json;

namespace DiplomaMakerApi._2.Models;

public abstract class BaseEntity<TEntity>()
where TEntity : BaseEntity<TEntity>
{
    public int Id { get; set; }
    public Guid Guid { get; init; } = Guid.NewGuid();

    public void Patch(TEntity patch)
    {
        foreach (var property in typeof(TEntity).GetProperties())
        {
            object? patchValue = property.GetValue(patch);
            property.SetValue(this, patchValue is not null
                ? patchValue
                : property.GetValue(this));
        }
    }

    public override string ToString()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    public TEntity HideIds()
    {
        var json = JsonConvert.SerializeObject(this, Formatting.Indented);

        string searchPattern = """
        "Id": [\d]+
        """;

        string replacePattern = """
        "Id": -1
        """;

        var result = Regex.Replace(ToString(), searchPattern, replacePattern);
        var newEntity = JsonConvert.DeserializeObject<TEntity>(result)
            ?? throw new Exception("Entity could not hide its Ids");

        return newEntity;
    }
}